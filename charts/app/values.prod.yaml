---

volumeClass: csi-cinder-high-speed

namespace: same3na

external_secrets:
  - name: same3na-config-secrets
    secretStoreRef:
      name: vault-store
      kind: ClusterSecretStore
    target:
      name: same3na-config-secrets
      creationPolicy: Owner
    data:
      - secretKey: POSTGRES_PASSWORD
        remoteRef:
          key: secret/same3na/config
          property: POSTGRES_PASSWORD

      - secretKey: SPOTIFY_ID
        remoteRef:
          key: secret/same3na/config
          property: SPOTIFY_ID

      - secretKey: SPOTIFY_SECRET
        remoteRef:
          key: secret/same3na/config
          property: SPOTIFY_SECRET

      - secretKey: YOUTUBE_API_KEY
        remoteRef:
          key: secret/same3na/config
          property: YOUTUBE_API_KEY

      - secretKey: YOUTUBE_COOKIES
        remoteRef:
          key: secret/same3na/config
          property: YOUTUBE_COOKIES

secrets: []

configMaps:
  - name: postgres-config
    labels:
      app: postgres
    data:
      POSTGRES_DB: ps_db
      POSTGRES_USER: ps_user
  - name: backend-app-config
    labels:
      app: backend-app
    data:
      PORT: "8000"
      BASE_URL: http://backend-app:8000
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      DBHOST: postgres
      DBPORT: "5432"
      SSLMODE: disable
      ALLOWED_ORIGINS: "*"
  - name: features-app-config
    labels:
      app: features-app
    data:
      PYTHONPATH: src
      DBHOST: postgres
      DBPORT: "5432"
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_DB: "0"

pvcs:
  - name: postgres-volume-claim
    labels:
      app: postgres
    accessModes:
      - ReadWriteOnce
    storage: 3Gi

appContainersImageTags:
  frontend: release
  # frontend-staging: staging
  backend-app: release
  # backend-app-staging: staging
  features-app: release

appDeployments:
  - name: frontend
    replicas: 1
    labels:
      app: frontend
    containers:
    - name: frontend
      image: ghcr.io/same3na/spa 
      imagePullPolicy: Always
      ports:
      - containerPort: 80
      resources:
        requests:
          cpu: "50m"
          memory: "60Mi"
        limits:
          cpu: "100m"
          memory: "100Mi"

  # - name: frontend-staging
  #   replicas: 1
  #   labels:
  #     app: frontend-staging
  #   containers:
  #   - name: frontend-staging
  #     image: ghcr.io/same3na/spa  # Use latest stable version
  #     imagePullPolicy: Always
  #     ports:
  #     - containerPort: 80
  #     resources:
  #       requests:
  #         cpu: "50m"
  #         memory: "60Mi"
  #       limits:
  #         cpu: "100m"
  #         memory: "100Mi"

  - name: backend-app
    replicas: 1
    labels:
      app: backend-app
    containers:
    - name: backend-app
      resources:
        requests:
          cpu: "100m"
          memory: "120Mi"
        limits:
          cpu: "250m"
          memory: "200Mi"
      image: ghcr.io/same3na/backend  # Use latest stable version
      imagePullPolicy: Always
      ports:
      - containerPort: 8000
      env:
      - name: DBUSER
        valueFrom:
          configMapKeyRef:
            name: postgres-config
            key: POSTGRES_USER
      - name: DBNAME
        valueFrom:
          configMapKeyRef:
            name: postgres-config
            key: POSTGRES_DB
      - name: DBPASS
        valueFrom:
          secretKeyRef:
            name: same3na-config-secrets
            key: POSTGRES_PASSWORD
      - name: YOUTUBE_API_KEY
        valueFrom:
          secretKeyRef:
            name: same3na-config-secrets
            key: YOUTUBE_API_KEY
      envFrom:
      - configMapRef:
          name: backend-app-config

  # - name: backend-app-staging
  #   replicas: 1
  #   labels:
  #     app: backend-app-staging
  #   containers:
  #   - name: backend-app-staging
  #     resources:
  #       requests:
  #         cpu: "100m"
  #         memory: "120Mi"
  #       limits:
  #         cpu: "250m"
  #         memory: "200Mi"
  #     image: ghcr.io/same3na/backend  # Use latest stable version
  #     imagePullPolicy: Always
  #     ports:
  #     - containerPort: 8000
  #     env:
  #     - name: DBUSER
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_USER
  #     - name: DBNAME
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_DB
  #     - name: DBPASS
  #       valueFrom:
  #         secretKeyRef:
  #           name: same3na-config-secrets
  #           key: POSTGRES_PASSWORD
  #     - name: YOUTUBE_API_KEY
  #       valueFrom:
  #         secretKeyRef:
  #           name: same3na-config-secrets
  #           key: YOUTUBE_API_KEY
  #     envFrom:
  #     - configMapRef:
  #         name: backend-app-config

  - name: features-app
    replicas: 0
    labels:
      app: features-app
    nodeSelector:
      my-pool-gpu: "true"  # Target only GPU nodes
    tolerations:
    - key: "analyze-features"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
    containers:
    - name: features-app
      image: ghcr.io/same3na/features-app   # Use latest stable version
      imagePullPolicy: Always
      resources:
        # requests:
        #   cpu: "500m"
        #   memory: "200Mi"
        limits:
          # cpu: "1000m"
          # memory: "700Mi"
          # nvidia.com/gpu: 1  # Request 1 GPU
      env:
      - name: DBUSER
        valueFrom:
          configMapKeyRef:
            name: postgres-config
            key: POSTGRES_USER
      - name: DBNAME
        valueFrom:
          configMapKeyRef:
            name: postgres-config
            key: POSTGRES_DB
      - name: DBPASS
        valueFrom:
          secretKeyRef:
            name: same3na-config-secrets
            key: POSTGRES_PASSWORD
      - name: SPOTIFY_ID
        valueFrom:
          secretKeyRef:
            name: same3na-config-secrets
            key: SPOTIFY_ID
      - name: SPOTIFY_SECRET
        valueFrom:
          secretKeyRef:
            name: same3na-config-secrets
            key: SPOTIFY_SECRET
      - name: YOUTUBE_API_KEY
        valueFrom:
          secretKeyRef:
            name: same3na-config-secrets
            key: YOUTUBE_API_KEY
      - name: YOUTUBE_COOKIES
        valueFrom:
          secretKeyRef:
            name: same3na-config-secrets
            key: YOUTUBE_COOKIES
      envFrom:
      - configMapRef:
          name: features-app-config


deployments:
  - name: postgres
    replicas: 1
    labels:
      app: postgres
    containers:
    - name: postgres
      resources:
        requests:
          cpu: "150m"
          memory: "200Mi"
        limits:
          cpu: "300m"
          memory: "400Mi"
      image: postgres:15  # Use latest stable version
      ports:
      - containerPort: 5432
      env:
      - name: PGDATA
        value: /var/lib/postgresql/data/pgdata  # Use a subdirectory
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: same3na-config-secrets
            key: POSTGRES_PASSWORD
      envFrom:
      - configMapRef:
          name: postgres-config
      volumeMounts:
      - name: postgres-storage
        mountPath: /var/lib/postgresql/data
    volumes:
    - name: postgres-storage
      persistentVolumeClaim:
        claimName: postgres-volume-claim

  - name: redis
    replicas: 1
    labels:
      app: redis
    containers:
    - name: redis
      resources:
        requests:
          cpu: "50m"
          memory: "50Mi"
        limits:
          cpu: "100m"
          memory: "100Mi"
      image: redis:latest
      ports:
        - containerPort: 6379

services:
  - name: postgres
    type: ClusterIP # Change to LoadBalancer if needed
    selector: postgres
    labels:
      app: postgres
    ports:
      - protocol: TCP
        port: 5432
        targetPort: 5432

  - name: redis
    type: ClusterIP # Change to LoadBalancer if needed
    selector: redis
    labels:
      app: redis
    ports:
      - protocol: TCP
        port: 6379
        targetPort: 6379

  - name: backend-app
    # type: ClusterIP # Change to LoadBalancer if needed
    type: ClusterIP
    selector: backend-app
    labels:
      app: backend-app
    ports:
      - protocol: TCP
        port: 8000
        targetPort: 8000

  - name: backend-app-staging
    type: ClusterIP
    selector: backend-app-staging
    labels:
      app: backend-app-staging
    ports:
      - protocol: TCP
        port: 8800
        targetPort: 8000

  - name: frontend
    type: ClusterIP
    selector: frontend
    labels:
      app: frontend
    ports:
      - protocol: TCP
        port: 3000
        targetPort: 80

  - name: frontend-staging
    type: ClusterIP
    selector: frontend-staging
    labels:
      app: frontend-staging
    ports:
      - protocol: TCP
        port: 3300
        targetPort: 80

jobs:
  # - name: migrate-job
  #   labels:
  #     app: migrate
  #   backoffLimit: 2
  #   containers:
  #   - name: migrate-container
  #     image: ghcr.io/same3na/migrations:release
  #     imagePullPolicy: Always
  #     env:
  #     - name: DB_USER
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_USER
  #     - name: DB_NAME
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_DB
  #     - name: DB_PASS
  #       valueFrom:
  #         secretKeyRef:
  #           name: same3na-config-secrets
  #           key: POSTGRES_PASSWORD
  #     - name: DB_HOST
  #       value: "postgres"

  # - name: group-create
  #   labels:
  #     app: group-create
  #   backoffLimit: 2
  #   containers:
  #   - name: groupadd-container
  #     image: ghcr.io/same3na/backend-cli:release-cli 
  #     imagePullPolicy: Always
  #     args: ["groups", "create", "metal", "Group For Metal Users", "true"]
  #     env:
  #     - name: DBUSER
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_USER
  #     - name: DBNAME
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_DB
  #     - name: DBPASS
  #       valueFrom:
  #         secretKeyRef:
  #           name: same3na-config-secrets
  #           key: POSTGRES_PASSWORD
  #     envFrom:
  #     - configMapRef:
  #         name: backend-app-config

  # - name: user-create
  #   labels:
  #     app: user-create
  #   backoffLimit: 2
  #   containers:
  #   - name: groupadd-container
  #     image: ghcr.io/same3na/backend-cli:release-cli 
  #     imagePullPolicy: Always
  #     args: ["users", "create", "namir", ""]
  #     env:
  #     - name: DBUSER
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_USER
  #     - name: DBNAME
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_DB
  #     - name: DBPASS
  #       valueFrom:
  #         secretKeyRef:
  #           name: same3na-config-secrets
  #           key: POSTGRES_PASSWORD
  #     envFrom:
  #     - configMapRef:
  #         name: backend-app-config

  # - name: user-assign-to-group
  #   labels:
  #     app: user-assign-to-group
  #   backoffLimit: 2
  #   containers:
  #   - name: groupadd-container
  #     image: ghcr.io/same3na/backend-cli:release-cli 
  #     imagePullPolicy: Always
  #     args: ["groups", "addMember", "", ""]
  #     env:
  #     - name: DBUSER
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_USER
  #     - name: DBNAME
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_DB
  #     - name: DBPASS
  #       valueFrom:
  #         secretKeyRef:
  #           name: same3na-config-secrets
  #           key: POSTGRES_PASSWORD
  #     envFrom:
  #     - configMapRef:
  #         name: backend-app-config

  # - name: refresh-failed-songs
  #   labels:
  #     app: refresh-failed-songs
  #   backoffLimit: 2
  #   containers:
  #   - name: refresh-failed-songs-container
  #     image: ghcr.io/same3na/backend-cli:release-cli 
  #     imagePullPolicy: Always
  #     args: ["songs", "refreshFeaturesFailedPendingSongs", "moulin"]
  #     env:
  #     - name: DBUSER
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_USER
  #     - name: DBNAME
  #       valueFrom:
  #         configMapKeyRef:
  #           name: postgres-config
  #           key: POSTGRES_DB
  #     - name: DBPASS
  #       valueFrom:
  #         secretKeyRef:
  #           name: same3na-config-secrets
  #           key: POSTGRES_PASSWORD
  #     envFrom:
  #     - configMapRef:
  #         name: backend-app-config


scaledObjects:
  - name: features-app-scaler
    targetRef: features-app
    minReplicaCount: 1  # Scale to 0 when idle
    maxReplicaCount: 1  # Scale up when events arrive
    cooldownPeriod: 60  # Wait 60s before scaling down
    triggers:
    - type: redis-streams
      metadata:
        address: redis.default.svc.cluster.local:6379  # Redis address
        stream: "mystream"  # Your stream name
        consumerGroup: "gpu-workers"
        redisPassword: ""  # Optional: Redis password if set
        minReplicaCount: "0"  # Min replicas
        maxReplicaCount: "1"  # Max replicas
        lagCount: "10"
        activationLagCount: "1" #
